program: statements

statements:
declaration_stat: DATA_TYPE ID ('=' expression)? ((',' ID)('=' expression)?)? ';'
DATA_TYPE: 'int' | 'float' | 'bool' | 'string'
ID: (('a'..'z' | 'A'..'Z')+(NUMBER*))+
NUMBER: ('0'..'9')+('.' ('0'..'9')+)?
STRING: ' " ' (NAME | NUMBER)* ' " '
BOOLEAN: 'true' | 'false'

assignment_stat: ID '=' expression

expression:
expr: and (('||') and)*
and: comp (('&&') and)*
comp: ar(('>' | '<' | '>=' | '<=' | '!=' | '==') or)
ar: term (('+'|'-') term)*
term: factor (('*', '/', '%') factor)*
factor: + | - | '(' expr ')' |  ('!'boolean_expr) | NUMBER| STRING | 'true' | 'false' | ID

method_declaration: 'function' ID '(' parameters? ')' block
block: '{' function_statements '}'
parameters: declaration_stat (',' declaration_stat)*
function_statements: declaration_stat | if_statement | while_statement | for_statement

class_declaration: 'class' ID (':' TYPE) block
block: '{'class_statements'}'
class_statements: declaration_stat | method_declaration

object_declaration:Type(ID) ID '=' Type '(' ')' ';'
parameters: declaration_stat (',' declaration_stat)*

resolution_object: ID '.' ID

//TODO:: Support resolution operator


if_statement: 'if' '(' expression ')' block
('else' block')?
block: '{' function_statements '}'

while_statement: 'while' '(' boolean_expression ')' block
block: '{' function_statements '}'

for_statement: 'for' '(' variable_declaration ';' boolean_expression; statement')' block
stat:statements
statement: assignment_stat
block: '{' function_statements '}'

comments_stat: '/*' TEXT '*/'

operators:
<, >, <=, >=, !=, ==, !, &&, ||, %

function_call:
ID '(' ((expression) ',')'* ')' ';'